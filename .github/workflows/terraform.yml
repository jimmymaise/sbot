name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

env:
  ## Sets environment variable
  TF_VAR_SLACK_SIGNING_SECRET: ${{ secrets.TF_VAR_SLACK_SIGNING_SECRET }}
  TF_VAR_SLACK_BOT_TOKEN: ${{ secrets.TF_VAR_SLACK_BOT_TOKEN }}
  TF_VAR_GOOGLE_SERVICE_BASE64_FILE_CONTENT: ${{ secrets.TF_VAR_GOOGLE_SERVICE_BASE64_FILE_CONTENT }}
  TF_VAR_LEAVE_REGISTER_SHEET: ${{ secrets.TF_VAR_LEAVE_REGISTER_SHEET }}
  TF_VAR_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_MANAGER_LEAVE_APPROVAL_CHANNEL: ${{ secrets.TF_VAR_MANAGER_LEAVE_APPROVAL_CHANNEL }}
  TF_VAR_OOO_CHANNEL: ${{ secrets.TF_VAR_OOO_CHANNEL }}
  TF_VAR_S3_BACKEND_BUCKET: ${{ secrets.TF_VAR_S3_BACKEND_BUCKET }}


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  - name: Terraform Init
    id: init
    run: terraform init -backend-config="bucket="${TF_VAR_S3_BACKEND_BUCKET}"" -backend-config="region="${TF_VAR_REGION}""

  - name: Terraform Validate
    id: validate
    run: terraform validate -no-color

  - name: Terraform Plan
    id: plan
    if: github.event_name == 'pull_request'
    run: terraform plan -no-color
    continue-on-error: true

  - uses: actions/github-script@0.9.0
    if: github.event_name == 'pull_request'
    env:
      PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        <details><summary>Show Plan</summary>
        \`\`\`\n
        ${process.env.PLAN}
        \`\`\`
        </details>
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
        github.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })
  - name: Terraform Plan Status
    if: steps.plan.outcome == 'failure'
    run: exit 1

  - name: Terraform Apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    run: terraform apply -auto-approve